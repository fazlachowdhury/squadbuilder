{"ast":null,"code":"import _ from 'lodash';\nexport function generateSquads(playerList, squads) {\n  const playerLimit = Math.floor(playerList.length / squads);\n  let expectedShootingAve = 0;\n  let expectedSkatingAve = 0;\n  let expectedCheckingAve = 0;\n  let squadShootingSum = [];\n  let squadSkatingSum = [];\n  let squadCheckingSum = [];\n\n  _.each(playerList, player => {\n    expectedShootingAve += parseInt(player.skills[0].rating);\n    expectedSkatingAve += parseInt(player.skills[1].rating);\n    expectedCheckingAve += parseInt(player.skills[2].rating);\n  }); //Calculate Average skills\n\n\n  expectedShootingAve /= playerLimit * squads;\n  expectedSkatingAve /= playerLimit * squads;\n  expectedCheckingAve /= playerLimit * squads;\n  console.log('squadShootingSum:', squadShootingSum[0]);\n  console.log('squadShootingSum:', squadShootingSum[0] += 2);\n  console.log('aveskill', expectedSkatingAve);\n  console.log('aveskill', expectedCheckingAve);\n  let tempSquad = [];\n\n  for (let i = 0; i < squads; i++) {\n    tempSquad.push([]);\n    squadShootingSum[i] = 0;\n    squadSkatingSum[i] = 0;\n    squadCheckingSum[i] = 0;\n  }\n\n  console.log('tempSquad1', tempSquad);\n  console.log('squadShootingSum:', squadShootingSum[0]);\n  console.log('squadShootingSum:', squadShootingSum[0] += 2);\n  let counter = 0;\n\n  _.each(playerList, player => {\n    let playerStrongestSkill = player.skills.reduce(function (prev, curr) {\n      return prev.rating > curr.rating ? prev : curr;\n    }); //Fill the empty squads first.\n\n    if (counter < squads && tempSquad[counter].length == 0) {\n      tempSquad[counter].push(player);\n      squadShootingSum[counter] += parseInt(player.skills[0].rating);\n      squadSkatingSum[counter] += parseInt(player.skills[1].rating);\n      squadCheckingSum[counter] += parseInt(player.skills[2].rating);\n      counter++;\n    } else {// let squadSelected = -1;\n      //  //add the player to the squad that has the smallest average for that skills\n      //  if(playerStrongestSkill.type.toUpperCase() == \"SHOOTING\"){\n      //    squadSelected = squadShootingAve.indexOf(Math.min(squadShootingAve));\n      //  }else if(playerStrongestSkill.type.toUpperCase() == \"SKATING\"){\n      //    squadSelected = squadSkatingAve.indexOf(Math.min(squadShootingAve));\n      //  }else{\n      //    squadSelected = squadCheckingAve.indexOf(Math.min(squadShootingAve));\n      //  }\n      //\n      //  if(tempSquad[squadSelected].length < playerLimit){\n      //    tempSquad[squadSelected].push(player);\n      //  }\n    }\n  });\n\n  console.log('tempSquad', tempSquad);\n}","map":{"version":3,"sources":["C:\\SquadBuilder\\squadbuilder\\src\\utils\\index.js"],"names":["_","generateSquads","playerList","squads","playerLimit","Math","floor","length","expectedShootingAve","expectedSkatingAve","expectedCheckingAve","squadShootingSum","squadSkatingSum","squadCheckingSum","each","player","parseInt","skills","rating","console","log","tempSquad","i","push","counter","playerStrongestSkill","reduce","prev","curr"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\nexport function generateSquads(playerList, squads) {\r\n    const playerLimit = Math.floor(playerList.length/ squads);\r\n    let expectedShootingAve = 0;\r\n    let expectedSkatingAve = 0;\r\n    let expectedCheckingAve = 0;\r\n    let squadShootingSum = [];\r\n    let squadSkatingSum = [];\r\n    let squadCheckingSum = [];\r\n\r\n    _.each(playerList, (player) => {\r\n        expectedShootingAve += parseInt(player.skills[0].rating);\r\n        expectedSkatingAve += parseInt(player.skills[1].rating);\r\n        expectedCheckingAve += parseInt(player.skills[2].rating);\r\n    })\r\n    //Calculate Average skills\r\n    expectedShootingAve /= (playerLimit * squads);\r\n    expectedSkatingAve /= (playerLimit * squads);\r\n    expectedCheckingAve /= (playerLimit * squads);\r\n\r\n    console.log('squadShootingSum:', squadShootingSum[0]);\r\n    console.log('squadShootingSum:', squadShootingSum[0] += 2);\r\n    console.log('aveskill', expectedSkatingAve);\r\n    console.log('aveskill', expectedCheckingAve);\r\n\r\n    let tempSquad = [];\r\n    for (let i = 0; i< squads; i++) {\r\n        tempSquad.push([])\r\n        squadShootingSum[i] = 0;\r\n        squadSkatingSum[i] = 0;\r\n        squadCheckingSum[i] = 0;\r\n    }\r\n    console.log('tempSquad1', tempSquad);\r\n    console.log('squadShootingSum:', squadShootingSum[0]);\r\n    console.log('squadShootingSum:', squadShootingSum[0] += 2);\r\n\r\n    let counter = 0;\r\n\r\n    _.each(playerList, (player) => {\r\n\r\n      let playerStrongestSkill = player.skills.reduce(function(prev, curr) {\r\n          return prev.rating > curr.rating ? prev : curr;\r\n      });\r\n\r\n      //Fill the empty squads first.\r\n      if(counter < squads && tempSquad[counter].length == 0){\r\n        tempSquad[counter].push(player);\r\n        squadShootingSum[counter] += parseInt(player.skills[0].rating);\r\n        squadSkatingSum[counter] += parseInt(player.skills[1].rating);\r\n        squadCheckingSum[counter] += parseInt(player.skills[2].rating);\r\n          counter++;\r\n      }else{\r\n         // let squadSelected = -1;\r\n         //  //add the player to the squad that has the smallest average for that skills\r\n         //  if(playerStrongestSkill.type.toUpperCase() == \"SHOOTING\"){\r\n         //    squadSelected = squadShootingAve.indexOf(Math.min(squadShootingAve));\r\n         //  }else if(playerStrongestSkill.type.toUpperCase() == \"SKATING\"){\r\n         //    squadSelected = squadSkatingAve.indexOf(Math.min(squadShootingAve));\r\n         //  }else{\r\n         //    squadSelected = squadCheckingAve.indexOf(Math.min(squadShootingAve));\r\n         //  }\r\n         //\r\n         //  if(tempSquad[squadSelected].length < playerLimit){\r\n         //    tempSquad[squadSelected].push(player);\r\n         //  }\r\n      }\r\n    })\r\n    console.log('tempSquad', tempSquad);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}