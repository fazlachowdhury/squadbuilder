{"ast":null,"code":"import _ from 'lodash';\nexport function generateSquads(playerList, squads) {\n  const playerLimit = Math.floor(playerList.length / squads);\n  let expectedShootingAve = 0,\n      expectedSkatingAve = 0,\n      expectedCheckingAve = 0,\n      squadShootingSum = [],\n      squadSkatingSum = [],\n      squadCheckingSum = [];\n\n  _.each(playerList, player => {\n    expectedShootingAve += parseInt(player.skills[0].rating);\n    expectedSkatingAve += parseInt(player.skills[1].rating);\n    expectedCheckingAve += parseInt(player.skills[2].rating);\n  }); //Calculate Average skills\n\n\n  expectedShootingAve /= playerLimit * squads;\n  expectedSkatingAve /= playerLimit * squads;\n  expectedCheckingAve /= playerLimit * squads; // console.log('squadShootingSum:', squadShootingSum[0]);\n  // console.log('squadShootingSum:', squadShootingSum[0] += 2);\n  // console.log('aveskill', expectedSkatingAve);\n  // console.log('aveskill', expectedCheckingAve);\n\n  let tempSquad = [];\n\n  for (let i = 0; i < squads; i++) {\n    tempSquad.push([]);\n    squadShootingSum[i] = 0;\n    squadSkatingSum[i] = 0;\n    squadCheckingSum[i] = 0;\n  }\n\n  console.log('tempSquad1', tempSquad);\n  let counter = 0;\n\n  _.each(playerList, player => {\n    let playerStrongestSkill = player.skills.reduce(function (prev, curr) {\n      return prev.rating > curr.rating ? prev : curr;\n    }); //Fill the empty squads first.\n\n    if (counter < squads && tempSquad[counter].length == 0) {\n      tempSquad[counter].push(player);\n      squadShootingSum[counter] += parseInt(player.skills[0].rating);\n      squadSkatingSum[counter] += parseInt(player.skills[1].rating);\n      squadCheckingSum[counter] += parseInt(player.skills[2].rating);\n      counter++;\n    } else {\n      console.log('player', player);\n      let squadSelected = -1; //add the player to the squad that has the smallest average for that skills\n\n      if (playerStrongestSkill.type.toUpperCase() == \"SHOOTING\") {\n        squadSelected = squadShootingSum.indexOf(squadShootingSum.reduce(function (prev, curr) {\n          return prev > curr ? prev : curr;\n        }));\n        console.log(' squadShootingSum squadSelected', squadSelected);\n      } else if (playerStrongestSkill.type.toUpperCase() == \"SKATING\") {\n        squadSelected = squadSkatingSum.reduce(function (prev, curr) {\n          return prev > curr ? prev : curr;\n        });\n        console.log('squadShootingSum squadSelected', squadSelected);\n      } else {\n        squadSelected = squadCheckingSum.reduce(function (prev, curr) {\n          return prev > curr ? prev : curr;\n        });\n        console.log('squadShootingSum squadSelected', squadSelected);\n      } // if(squadSelected >= 0 && tempSquad[squadSelected].length < playerLimit){\n      //   tempSquad[squadSelected].push(player);\n      // }\n\n    }\n  });\n\n  console.log('tempSquad', tempSquad);\n}","map":{"version":3,"sources":["C:\\SquadBuilder\\squadbuilder\\src\\utils\\index.js"],"names":["_","generateSquads","playerList","squads","playerLimit","Math","floor","length","expectedShootingAve","expectedSkatingAve","expectedCheckingAve","squadShootingSum","squadSkatingSum","squadCheckingSum","each","player","parseInt","skills","rating","tempSquad","i","push","console","log","counter","playerStrongestSkill","reduce","prev","curr","squadSelected","type","toUpperCase","indexOf"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\nexport function generateSquads(playerList, squads) {\r\n    const playerLimit = Math.floor(playerList.length/ squads);\r\n    let expectedShootingAve = 0,\r\n        expectedSkatingAve = 0,\r\n        expectedCheckingAve = 0,\r\n        squadShootingSum = [],\r\n        squadSkatingSum = [],\r\n        squadCheckingSum = [];\r\n\r\n    _.each(playerList, (player) => {\r\n        expectedShootingAve += parseInt(player.skills[0].rating);\r\n        expectedSkatingAve += parseInt(player.skills[1].rating);\r\n        expectedCheckingAve += parseInt(player.skills[2].rating);\r\n    })\r\n    //Calculate Average skills\r\n    expectedShootingAve /= (playerLimit * squads);\r\n    expectedSkatingAve /= (playerLimit * squads);\r\n    expectedCheckingAve /= (playerLimit * squads);\r\n\r\n    // console.log('squadShootingSum:', squadShootingSum[0]);\r\n    // console.log('squadShootingSum:', squadShootingSum[0] += 2);\r\n    // console.log('aveskill', expectedSkatingAve);\r\n    // console.log('aveskill', expectedCheckingAve);\r\n\r\n    let tempSquad = [];\r\n    for (let i = 0; i< squads; i++) {\r\n        tempSquad.push([])\r\n        squadShootingSum[i] = 0;\r\n        squadSkatingSum[i] = 0;\r\n        squadCheckingSum[i] = 0;\r\n    }\r\n    console.log('tempSquad1', tempSquad);\r\n\r\n    let counter = 0;\r\n\r\n    _.each(playerList, (player) => {\r\n\r\n      let playerStrongestSkill = player.skills.reduce(function(prev, curr) {\r\n          return prev.rating > curr.rating ? prev : curr;\r\n      });\r\n\r\n      //Fill the empty squads first.\r\n      if(counter < squads && tempSquad[counter].length == 0){\r\n        tempSquad[counter].push(player);\r\n        squadShootingSum[counter] += parseInt(player.skills[0].rating);\r\n        squadSkatingSum[counter] += parseInt(player.skills[1].rating);\r\n        squadCheckingSum[counter] += parseInt(player.skills[2].rating);\r\n        counter++;\r\n      }else{\r\n        console.log('player', player);\r\n         let squadSelected = -1;\r\n          //add the player to the squad that has the smallest average for that skills\r\n          if(playerStrongestSkill.type.toUpperCase() == \"SHOOTING\"){\r\n            squadSelected = squadShootingSum.indexOf(squadShootingSum.reduce(function(prev, curr) {\r\n                return prev > curr ? prev : curr;\r\n            }));\r\n            console.log(' squadShootingSum squadSelected', squadSelected);\r\n          }else if(playerStrongestSkill.type.toUpperCase() == \"SKATING\"){\r\n            squadSelected = squadSkatingSum.reduce(function(prev, curr) {\r\n                return prev > curr ? prev : curr;\r\n            });\r\n            console.log('squadShootingSum squadSelected', squadSelected);\r\n          }else{\r\n            squadSelected = squadCheckingSum.reduce(function(prev, curr) {\r\n                return prev > curr ? prev : curr;\r\n            });\r\n            console.log('squadShootingSum squadSelected', squadSelected);\r\n          }\r\n\r\n          // if(squadSelected >= 0 && tempSquad[squadSelected].length < playerLimit){\r\n          //   tempSquad[squadSelected].push(player);\r\n          // }\r\n      }\r\n    })\r\n    console.log('tempSquad', tempSquad);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}