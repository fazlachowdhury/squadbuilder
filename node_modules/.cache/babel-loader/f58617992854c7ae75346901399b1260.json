{"ast":null,"code":"import _ from 'lodash';\nexport function generateSquads(allPlayersList, squads) {\n  //check if squads is 0\n  if (squads === 0) {\n    return allPlayersList;\n  } //copy array\n\n\n  let currentPlayerList = _.clone(allPlayersList, true);\n\n  console.log(\"Cloned player list:\", currentPlayerList); //Players in each squad.\n\n  const playerLimit = Math.floor(currentPlayerList.length / squads); //used to balance team average for each skill\n\n  let squadShootingSum = [],\n      squadSkatingSum = [],\n      squadCheckingSum = [];\n  let tempSquad = [];\n\n  for (let i = 0; i < squads; i++) {\n    tempSquad.push([]);\n  }\n\n  let counter = 0;\n\n  for (let playerCounter = currentPlayerList.length - 1; playerCounter >= 0; playerCounter--) {\n    let player = currentPlayerList[playerCounter]; //Use player's strongest skill while selecting a squad.\n\n    let playerStrongestSkill = player.skills.reduce(function (prev, curr) {\n      return prev.rating > curr.rating ? prev : curr;\n    }); //Fill the empty squads first.\n\n    if (counter < squads && tempSquad[counter].length == 0) {\n      tempSquad[counter].push(player); //update squad stats\n\n      squadShootingSum[counter] = parseInt(player.skills[0].rating);\n      squadSkatingSum[counter] = parseInt(player.skills[1].rating);\n      squadCheckingSum[counter] = parseInt(player.skills[2].rating); //remove player from list indicating player has been added to a squad.\n\n      _(currentPlayerList).splice(playerCounter, 1).value();\n\n      counter++;\n    } else {\n      let squadSelected; //add the player to the squad that has the smallest average for that skills\n\n      if (playerStrongestSkill.type.toUpperCase() === \"SHOOTING\") {\n        squadSelected = squadShootingSum.indexOf(squadShootingSum.reduce(function (prev, curr) {\n          return prev < curr ? prev : curr;\n        }));\n        console.log('squadShootingSum', squadShootingSum[squadSelected]);\n      } else if (playerStrongestSkill.type.toUpperCase() === \"SKATING\") {\n        squadSelected = squadSkatingSum.indexOf(squadSkatingSum.reduce(function (prev, curr) {\n          return prev < curr ? prev : curr;\n        }));\n        console.log('squadShootingSum', squadShootingSum[squadSelected]);\n      } else {\n        squadSelected = squadCheckingSum.indexOf(squadCheckingSum.reduce(function (prev, curr) {\n          return prev < curr ? prev : curr;\n        }));\n      }\n\n      squadSelected = Number(squadSelected);\n\n      if (tempSquad[squadSelected].length < playerLimit) {\n        tempSquad[squadSelected].push(player); //update squad stats\n\n        squadShootingSum.splice(squadSelected, 1, squadShootingSum[squadSelected] + parseInt(player.skills[0].rating));\n        squadSkatingSum.splice(squadSelected, 1, squadSkatingSum[squadSelected] + parseInt(player.skills[1].rating));\n        squadCheckingSum.splice(squadSelected, 1, squadCheckingSum[squadSelected] + parseInt(player.skills[2].rating)); //remove player from list indicating player has been added to a squad.\n\n        _(currentPlayerList).splice(playerCounter, 1).value();\n      }\n    }\n  } //Rest of the players will go into new squad.\n\n\n  tempSquad.push([]);\n\n  _.each(currentPlayerList, player => {\n    tempSquad[tempSquad.length - 1].push(player);\n  });\n\n  console.log(\"Squad:\", tempSquad);\n  console.log(\"Current Player list:\", currentPlayerList);\n  console.log(\"All Player list:\", allPlayersList);\n  return tempSquad;\n}","map":{"version":3,"sources":["C:\\SquadBuilder\\squadbuilder\\src\\utils\\index.js"],"names":["_","generateSquads","allPlayersList","squads","currentPlayerList","clone","console","log","playerLimit","Math","floor","length","squadShootingSum","squadSkatingSum","squadCheckingSum","tempSquad","i","push","counter","playerCounter","player","playerStrongestSkill","skills","reduce","prev","curr","rating","parseInt","splice","value","squadSelected","type","toUpperCase","indexOf","Number","each"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\nexport function generateSquads(allPlayersList, squads) {\r\n    //check if squads is 0\r\n    if(squads === 0){\r\n      return allPlayersList;\r\n    }\r\n\r\n    //copy array\r\n    let currentPlayerList = _.clone(allPlayersList, true);\r\n    console.log(\"Cloned player list:\",currentPlayerList);\r\n\r\n    //Players in each squad.\r\n    const playerLimit = Math.floor(currentPlayerList.length/ squads);\r\n\r\n    //used to balance team average for each skill\r\n    let squadShootingSum = [],\r\n        squadSkatingSum = [],\r\n        squadCheckingSum = [];\r\n\r\n    let tempSquad = [];\r\n    for (let i = 0; i< squads; i++) {\r\n        tempSquad.push([])\r\n    }\r\n\r\n    let counter = 0;\r\n    for (let playerCounter = currentPlayerList.length - 1 ; playerCounter >= 0 ; playerCounter--){\r\n      let player = currentPlayerList[playerCounter];\r\n      //Use player's strongest skill while selecting a squad.\r\n      let playerStrongestSkill = player.skills.reduce(function(prev, curr) {\r\n          return prev.rating > curr.rating ? prev : curr;\r\n      });\r\n\r\n      //Fill the empty squads first.\r\n      if(counter < squads && tempSquad[counter].length == 0){\r\n        tempSquad[counter].push(player);\r\n        //update squad stats\r\n        squadShootingSum[counter] = parseInt(player.skills[0].rating);\r\n        squadSkatingSum[counter] = parseInt(player.skills[1].rating);\r\n        squadCheckingSum[counter] = parseInt(player.skills[2].rating);\r\n        //remove player from list indicating player has been added to a squad.\r\n        _(currentPlayerList).splice(playerCounter, 1).value();\r\n        counter++;\r\n      }else{\r\n         let squadSelected;\r\n          //add the player to the squad that has the smallest average for that skills\r\n          if(playerStrongestSkill.type.toUpperCase() === \"SHOOTING\"){\r\n            squadSelected = squadShootingSum.indexOf(squadShootingSum.reduce(function(prev, curr) {\r\n                return prev < curr ? prev : curr;\r\n            }));\r\n            console.log('squadShootingSum', squadShootingSum[squadSelected]);\r\n          }else if(playerStrongestSkill.type.toUpperCase() === \"SKATING\"){\r\n            squadSelected = squadSkatingSum.indexOf(squadSkatingSum.reduce(function(prev, curr) {\r\n                return prev < curr ? prev : curr;\r\n            }));\r\n            console.log('squadShootingSum', squadShootingSum[squadSelected]);\r\n          }else{\r\n            squadSelected = squadCheckingSum.indexOf(squadCheckingSum.reduce(function(prev, curr) {\r\n                return prev < curr ? prev : curr;\r\n            }));\r\n          }\r\n\r\n\r\n          squadSelected = Number(squadSelected);\r\n\r\n          if(tempSquad[squadSelected].length < playerLimit){\r\n              tempSquad[squadSelected].push(player);\r\n              //update squad stats\r\n              squadShootingSum.splice(squadSelected,1,squadShootingSum[squadSelected] + parseInt(player.skills[0].rating));\r\n              squadSkatingSum.splice(squadSelected,1,squadSkatingSum[squadSelected] + parseInt(player.skills[1].rating));\r\n              squadCheckingSum.splice(squadSelected,1,squadCheckingSum[squadSelected] + parseInt(player.skills[2].rating));\r\n              //remove player from list indicating player has been added to a squad.\r\n              _(currentPlayerList).splice(playerCounter, 1).value();\r\n          }\r\n      }\r\n\r\n    }\r\n\r\n    //Rest of the players will go into new squad.\r\n    tempSquad.push([]);\r\n    _.each(currentPlayerList, (player) => {\r\n      tempSquad[tempSquad.length - 1].push(player);\r\n    });\r\n\r\n    console.log(\"Squad:\", tempSquad);\r\n    console.log(\"Current Player list:\", currentPlayerList);\r\n    console.log(\"All Player list:\", allPlayersList);\r\n\r\n    return tempSquad;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}