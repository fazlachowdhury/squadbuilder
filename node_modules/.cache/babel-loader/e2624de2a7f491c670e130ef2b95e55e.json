{"ast":null,"code":"import _ from 'lodash';\nexport function generateSquads(playerList, squads) {\n  const playerLimit = Math.floor(playerList.length / squads);\n  let expectedShootingAve = 0;\n  let expectedSkatingAve = 0;\n  let expectedCheckingAve = 0;\n\n  _.each(playerList, player => {\n    expectedShootingAve += parseInt(player.skills[0].rating);\n    expectedSkatingAve += parseInt(player.skills[1].rating);\n    expectedCheckingAve += parseInt(player.skills[2].rating);\n  });\n\n  console.log('tempSquad1', tempSquad);\n  let tempSquad = [];\n\n  for (let i = 0; i < squads; i++) {\n    tempSquad.push([]);\n  }\n\n  console.log('tempSquad1', tempSquad);\n  let counter = 0;\n\n  _.each(playerList, player => {\n    let playerStrongestSkill = player.skills.reduce(function (prev, curr) {\n      return prev.rating > curr.rating ? prev : curr;\n    }); //Fill the empty squads first.\n\n    if (counter < squads && tempSquad[counter].length == 0) {\n      tempSquad[counter].push(player); // squadShootingAve[counter].push(parseInt(player.skills[0].rating));\n      // squadSkatingAve[counter].push(parseInt(player.skills[1].rating));\n      // squadCheckingAve[counter].push(parseInt(player.skills[2].rating));\n\n      counter++;\n    } else {// //add the player to the squad that has the smallest average for that skills\n      // _.each(tempSquad, (squad) => {\n      //\n    }\n  });\n\n  console.log('tempSquad', tempSquad);\n}","map":{"version":3,"sources":["C:\\SquadBuilder\\squadbuilder\\src\\utils\\index.js"],"names":["_","generateSquads","playerList","squads","playerLimit","Math","floor","length","expectedShootingAve","expectedSkatingAve","expectedCheckingAve","each","player","parseInt","skills","rating","console","log","tempSquad","i","push","counter","playerStrongestSkill","reduce","prev","curr"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAO,SAASC,cAAT,CAAwBC,UAAxB,EAAoCC,MAApC,EAA4C;AAC/C,QAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWJ,UAAU,CAACK,MAAX,GAAmBJ,MAA9B,CAApB;AACA,MAAIK,mBAAmB,GAAG,CAA1B;AACA,MAAIC,kBAAkB,GAAG,CAAzB;AACA,MAAIC,mBAAmB,GAAG,CAA1B;;AACAV,EAAAA,CAAC,CAACW,IAAF,CAAOT,UAAP,EAAoBU,MAAD,IAAY;AAC3BJ,IAAAA,mBAAmB,IAAIK,QAAQ,CAACD,MAAM,CAACE,MAAP,CAAc,CAAd,EAAiBC,MAAlB,CAA/B;AACAN,IAAAA,kBAAkB,IAAII,QAAQ,CAACD,MAAM,CAACE,MAAP,CAAc,CAAd,EAAiBC,MAAlB,CAA9B;AACAL,IAAAA,mBAAmB,IAAIG,QAAQ,CAACD,MAAM,CAACE,MAAP,CAAc,CAAd,EAAiBC,MAAlB,CAA/B;AACH,GAJD;;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,SAA1B;AAEA,MAAIA,SAAS,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAEhB,MAAnB,EAA2BgB,CAAC,EAA5B,EAAgC;AAC5BD,IAAAA,SAAS,CAACE,IAAV,CAAe,EAAf;AACH;;AACDJ,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,SAA1B;AAEA,MAAIG,OAAO,GAAG,CAAd;;AAEArB,EAAAA,CAAC,CAACW,IAAF,CAAOT,UAAP,EAAoBU,MAAD,IAAY;AAE7B,QAAIU,oBAAoB,GAAGV,MAAM,CAACE,MAAP,CAAcS,MAAd,CAAqB,UAASC,IAAT,EAAeC,IAAf,EAAqB;AACjE,aAAOD,IAAI,CAACT,MAAL,GAAcU,IAAI,CAACV,MAAnB,GAA4BS,IAA5B,GAAmCC,IAA1C;AACH,KAF0B,CAA3B,CAF6B,CAM7B;;AACA,QAAGJ,OAAO,GAAGlB,MAAV,IAAoBe,SAAS,CAACG,OAAD,CAAT,CAAmBd,MAAnB,IAA6B,CAApD,EAAsD;AACpDW,MAAAA,SAAS,CAACG,OAAD,CAAT,CAAmBD,IAAnB,CAAwBR,MAAxB,EADoD,CAEpD;AACA;AACA;;AACES,MAAAA,OAAO;AACV,KAND,MAMK,CAED;AACA;AACA;AACC;AACN,GAnBD;;AAoBAL,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,SAAzB;AACH","sourcesContent":["import _ from 'lodash';\r\nexport function generateSquads(playerList, squads) {\r\n    const playerLimit = Math.floor(playerList.length/ squads);\r\n    let expectedShootingAve = 0;\r\n    let expectedSkatingAve = 0;\r\n    let expectedCheckingAve = 0;\r\n    _.each(playerList, (player) => {\r\n        expectedShootingAve += parseInt(player.skills[0].rating);\r\n        expectedSkatingAve += parseInt(player.skills[1].rating);\r\n        expectedCheckingAve += parseInt(player.skills[2].rating);\r\n    })\r\n\r\n    console.log('tempSquad1', tempSquad);\r\n\r\n    let tempSquad = [];\r\n    for (let i = 0; i< squads; i++) {\r\n        tempSquad.push([])\r\n    }\r\n    console.log('tempSquad1', tempSquad);\r\n\r\n    let counter = 0;\r\n\r\n    _.each(playerList, (player) => {\r\n\r\n      let playerStrongestSkill = player.skills.reduce(function(prev, curr) {\r\n          return prev.rating > curr.rating ? prev : curr;\r\n      });\r\n\r\n      //Fill the empty squads first.\r\n      if(counter < squads && tempSquad[counter].length == 0){\r\n        tempSquad[counter].push(player);\r\n        // squadShootingAve[counter].push(parseInt(player.skills[0].rating));\r\n        // squadSkatingAve[counter].push(parseInt(player.skills[1].rating));\r\n        // squadCheckingAve[counter].push(parseInt(player.skills[2].rating));\r\n          counter++;\r\n      }else{\r\n\r\n          // //add the player to the squad that has the smallest average for that skills\r\n          // _.each(tempSquad, (squad) => {\r\n          //\r\n          }\r\n    })\r\n    console.log('tempSquad', tempSquad);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}