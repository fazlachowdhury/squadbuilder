{"ast":null,"code":"import _ from 'lodash';\nexport function generateSquads(playerList, squads) {\n  const playerLimit = Math.floor(playerList.length / squads);\n  console.log('check$$$$', playerLimit, squads);\n  let tempSquad = [];\n\n  for (let i = 0; i < squads; i++) {\n    tempSquad.push([]);\n  }\n\n  console.log('tempSquad1', tempSquad);\n  let counter = 0; // let squadShootingAverage = 0;\n  // let squadSkatingAve = 0;\n  // let squadCheckingAve = 0;\n  // let squadShootingAve = [];\n  // let squadSkatingAve = [];\n  // let squadCheckingAve = [];\n\n  _.each(playerList, player => {\n    let playerStrongestSkill = player.skills.reduce(function (prev, curr) {\n      return prev.rating > curr.rating ? prev : curr;\n    }); //Fill the empty squads first.\n\n    if (counter < squads && tempSquad[counter].length == 0) {\n      tempSquad[counter].push(player);\n      counter++;\n    } // //otherwise find the squad with the smallest average for that skills\n    // //and add  the player to that squad.\n    // let suitableSquad = 0;\n    // _.each(tempSquad, (squad) => {\n    //   if(Math)\n    // }\n    //\n    //\n    //\n    // let suitableSquadFound = false;\n    // //Check for  suitable squads\n    // while(!suitableSquadFound){\n    //   //look into each squad.\n    //   _.each(tempSquad, (squad) => {\n    //     //add player if squad is empty\n    //     if(squad.lenght == 0){\n    //       squad.push(player);\n    //       suitableSquadFound = true\n    //     }else if(squad.lenght < playerLimit){\n    //       //add player\n    //     }\n    //   }\n    // }\n    //Check if squad is empty\n    // if(tempSquad[counter].length == 0){\n    //     tempSquad[counter].push(player);\n    // } else if (tempSquad[counter].length < playerLimit){\n    //   if(playerStrongestSkill.type.toUpperCase() === \"SHOOTING\"\n    //     && )\n    // }\n    //\n    // counter++;\n\n  });\n\n  console.log('tempSquad', tempSquad);\n}","map":{"version":3,"sources":["C:\\SquadBuilder\\squadbuilder\\src\\utils\\index.js"],"names":["_","generateSquads","playerList","squads","playerLimit","Math","floor","length","console","log","tempSquad","i","push","counter","each","player","playerStrongestSkill","skills","reduce","prev","curr","rating"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAO,SAASC,cAAT,CAAwBC,UAAxB,EAAoCC,MAApC,EAA4C;AAC/C,QAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWJ,UAAU,CAACK,MAAX,GAAmBJ,MAA9B,CAApB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,WAAzB,EAAsCD,MAAtC;AACA,MAAIO,SAAS,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAER,MAAnB,EAA2BQ,CAAC,EAA5B,EAAgC;AAC5BD,IAAAA,SAAS,CAACE,IAAV,CAAe,EAAf;AACH;;AACDJ,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,SAA1B;AAEA,MAAIG,OAAO,GAAG,CAAd,CAT+C,CAU/C;AACA;AACA;AACA;AACA;AACA;;AAEAb,EAAAA,CAAC,CAACc,IAAF,CAAOZ,UAAP,EAAoBa,MAAD,IAAY;AAE7B,QAAIC,oBAAoB,GAAGD,MAAM,CAACE,MAAP,CAAcC,MAAd,CAAqB,UAASC,IAAT,EAAeC,IAAf,EAAqB;AACjE,aAAOD,IAAI,CAACE,MAAL,GAAcD,IAAI,CAACC,MAAnB,GAA4BF,IAA5B,GAAmCC,IAA1C;AACH,KAF0B,CAA3B,CAF6B,CAM7B;;AACA,QAAGP,OAAO,GAAGV,MAAV,IAAoBO,SAAS,CAACG,OAAD,CAAT,CAAmBN,MAAnB,IAA6B,CAApD,EAAsD;AAClDG,MAAAA,SAAS,CAACG,OAAD,CAAT,CAAmBD,IAAnB,CAAwBG,MAAxB;AACAF,MAAAA,OAAO;AACV,KAV4B,CAW7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,GA5CD;;AA6CAL,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,SAAzB;AACH","sourcesContent":["import _ from 'lodash';\r\nexport function generateSquads(playerList, squads) {\r\n    const playerLimit = Math.floor(playerList.length/ squads);\r\n    console.log('check$$$$', playerLimit, squads)\r\n    let tempSquad = [];\r\n    for (let i = 0; i< squads; i++) {\r\n        tempSquad.push([])\r\n    }\r\n    console.log('tempSquad1', tempSquad);\r\n\r\n    let counter = 0;\r\n    // let squadShootingAverage = 0;\r\n    // let squadSkatingAve = 0;\r\n    // let squadCheckingAve = 0;\r\n    // let squadShootingAve = [];\r\n    // let squadSkatingAve = [];\r\n    // let squadCheckingAve = [];\r\n\r\n    _.each(playerList, (player) => {\r\n\r\n      let playerStrongestSkill = player.skills.reduce(function(prev, curr) {\r\n          return prev.rating > curr.rating ? prev : curr;\r\n      });\r\n\r\n      //Fill the empty squads first.\r\n      if(counter < squads && tempSquad[counter].length == 0){\r\n          tempSquad[counter].push(player);\r\n          counter++;\r\n      }\r\n      // //otherwise find the squad with the smallest average for that skills\r\n      // //and add  the player to that squad.\r\n      // let suitableSquad = 0;\r\n      // _.each(tempSquad, (squad) => {\r\n      //   if(Math)\r\n      // }\r\n      //\r\n      //\r\n      //\r\n      // let suitableSquadFound = false;\r\n      // //Check for  suitable squads\r\n      // while(!suitableSquadFound){\r\n      //   //look into each squad.\r\n      //   _.each(tempSquad, (squad) => {\r\n      //     //add player if squad is empty\r\n      //     if(squad.lenght == 0){\r\n      //       squad.push(player);\r\n      //       suitableSquadFound = true\r\n      //     }else if(squad.lenght < playerLimit){\r\n      //       //add player\r\n      //     }\r\n      //   }\r\n      // }\r\n      //Check if squad is empty\r\n\r\n      // if(tempSquad[counter].length == 0){\r\n      //     tempSquad[counter].push(player);\r\n      // } else if (tempSquad[counter].length < playerLimit){\r\n      //   if(playerStrongestSkill.type.toUpperCase() === \"SHOOTING\"\r\n      //     && )\r\n      // }\r\n      //\r\n      // counter++;\r\n    })\r\n    console.log('tempSquad', tempSquad);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}