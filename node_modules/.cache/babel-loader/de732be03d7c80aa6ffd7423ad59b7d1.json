{"ast":null,"code":"import _ from 'lodash';\nexport function generateSquads(playerList, squads) {\n  const playerLimit = Math.floor(playerList.length / squads);\n  console.log('playerLimit:', playerLimit);\n  let squadShootingSum = [],\n      squadSkatingSum = [],\n      squadCheckingSum = [];\n  let tempSquad = [];\n\n  for (let i = 0; i < squads; i++) {\n    tempSquad.push([]);\n  }\n\n  console.log('tempSquad1', tempSquad);\n  let counter = 0;\n\n  _.each(playerList, player => {\n    let playerStrongestSkill = player.skills.reduce(function (prev, curr) {\n      return prev.rating > curr.rating ? prev : curr;\n    }); //Fill the empty squads first.\n\n    if (counter < squads && tempSquad[counter].length == 0) {\n      tempSquad[counter].push(player);\n      console.log('squadShootingSum:', squadShootingSum);\n      squadShootingSum[counter] = parseInt(player.skills[0].rating);\n      squadSkatingSum[counter] = parseInt(player.skills[1].rating);\n      squadCheckingSum[counter] = parseInt(player.skills[2].rating);\n      console.log('squadShootingSum:', squadShootingSum); // _.remove(playerList, {\n      //     _id: player._id\n      // });\n\n      counter++;\n    } else {\n      let squadSelected; //add the player to the squad that has the smallest average for that skills\n\n      if (playerStrongestSkill.type.toUpperCase() === \"SHOOTING\") {\n        squadSelected = squadShootingSum.indexOf(squadShootingSum.reduce(function (prev, curr) {\n          return prev < curr ? prev : curr;\n        }));\n        console.log('squadShootingSum', squadShootingSum[squadSelected]);\n      } else if (playerStrongestSkill.type.toUpperCase() === \"SKATING\") {\n        squadSelected = squadSkatingSum.indexOf(squadSkatingSum.reduce(function (prev, curr) {\n          return prev < curr ? prev : curr;\n        }));\n        console.log('squadShootingSum', squadShootingSum[squadSelected]);\n      } else {\n        squadSelected = squadCheckingSum.indexOf(squadCheckingSum.reduce(function (prev, curr) {\n          return prev < curr ? prev : curr;\n        }));\n        console.log('squadCheckingSum', squadCheckingSum[squadSelected]);\n      }\n\n      squadSelected = Number(squadSelected);\n      console.log('tempSquad[squadSelected].length:', tempSquad[squadSelected].length, typeof tempSquad[squadSelected].length);\n      console.log('playerLimit:', playerLimit, typeof playerLimit);\n\n      if (tempSquad[squadSelected].length < playerLimit) {\n        tempSquad[squadSelected].push(player); // playerList.splice(squadSelected, 1);\n\n        console.log('squadShootingSum', squadShootingSum);\n        squadShootingSum.splice(squadSelected, 1, squadShootingSum[squadSelected] + parseInt(player.skills[0].rating));\n        squadSkatingSum.splice(squadSelected, 1, squadSkatingSum[squadSelected] + parseInt(player.skills[1].rating));\n        squadCheckingSum.splice(squadSelected, 1, squadCheckingSum[squadSelected] + parseInt(player.skills[2].rating));\n        console.log('squadShootingSum after updating', squadShootingSum);\n      } else {\n        console.log('squadSelected but not added:', squadSelected);\n        console.log('tempSquad[squadSelected] but not added:', tempSquad[squadSelected]);\n      }\n    }\n  }); //Rest of the players will go into new squad.\n\n\n  tempSquad.push([]);\n\n  for (let i = playerList.legth - 1; i > playerLimit * squads; i--) {\n    tempSquad[tempSquad.length - 1].push(playerList[i]);\n  } // _.each(playerList, (player) => {\n  //   tempSquad[tempSquad.length - 1].push(player);\n  // });\n\n\n  console.log('rest of the players', tempSquad);\n}","map":{"version":3,"sources":["C:\\SquadBuilder\\squadbuilder\\src\\utils\\index.js"],"names":["_","generateSquads","playerList","squads","playerLimit","Math","floor","length","console","log","squadShootingSum","squadSkatingSum","squadCheckingSum","tempSquad","i","push","counter","each","player","playerStrongestSkill","skills","reduce","prev","curr","rating","parseInt","squadSelected","type","toUpperCase","indexOf","Number","splice","legth"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\nexport function generateSquads(playerList, squads) {\r\n    const playerLimit = Math.floor(playerList.length/ squads);\r\n    console.log('playerLimit:', playerLimit);\r\n\r\n    let squadShootingSum = [],\r\n        squadSkatingSum = [],\r\n        squadCheckingSum = [];\r\n\r\n    let tempSquad = [];\r\n    for (let i = 0; i< squads; i++) {\r\n        tempSquad.push([])\r\n    }\r\n    console.log('tempSquad1', tempSquad);\r\n\r\n    let counter = 0;\r\n\r\n    _.each(playerList, (player) => {\r\n\r\n      let playerStrongestSkill = player.skills.reduce(function(prev, curr) {\r\n          return prev.rating > curr.rating ? prev : curr;\r\n      });\r\n\r\n      //Fill the empty squads first.\r\n      if(counter < squads && tempSquad[counter].length == 0){\r\n        tempSquad[counter].push(player);\r\n\r\n        console.log('squadShootingSum:', squadShootingSum);\r\n\r\n        squadShootingSum[counter] = parseInt(player.skills[0].rating);\r\n        squadSkatingSum[counter] = parseInt(player.skills[1].rating);\r\n        squadCheckingSum[counter] = parseInt(player.skills[2].rating);\r\n\r\n        console.log('squadShootingSum:', squadShootingSum);\r\n        // _.remove(playerList, {\r\n        //     _id: player._id\r\n        // });\r\n        counter++;\r\n      }else{\r\n         let squadSelected;\r\n          //add the player to the squad that has the smallest average for that skills\r\n          if(playerStrongestSkill.type.toUpperCase() === \"SHOOTING\"){\r\n            squadSelected = squadShootingSum.indexOf(squadShootingSum.reduce(function(prev, curr) {\r\n                return prev < curr ? prev : curr;\r\n            }));\r\n            console.log('squadShootingSum', squadShootingSum[squadSelected]);\r\n          }else if(playerStrongestSkill.type.toUpperCase() === \"SKATING\"){\r\n            squadSelected = squadSkatingSum.indexOf(squadSkatingSum.reduce(function(prev, curr) {\r\n                return prev < curr ? prev : curr;\r\n            }));\r\n            console.log('squadShootingSum', squadShootingSum[squadSelected]);\r\n          }else{\r\n            squadSelected = squadCheckingSum.indexOf(squadCheckingSum.reduce(function(prev, curr) {\r\n                return prev < curr ? prev : curr;\r\n            }));\r\n            console.log('squadCheckingSum', squadCheckingSum[squadSelected]);\r\n          }\r\n\r\n\r\n          squadSelected = Number(squadSelected);\r\n          console.log('tempSquad[squadSelected].length:',tempSquad[squadSelected].length, typeof tempSquad[squadSelected].length);\r\n          console.log('playerLimit:',playerLimit, typeof playerLimit);\r\n\r\n          if(tempSquad[squadSelected].length < playerLimit){\r\n              tempSquad[squadSelected].push(player);\r\n              // playerList.splice(squadSelected, 1);\r\n              console.log('squadShootingSum', squadShootingSum);\r\n              squadShootingSum.splice(squadSelected,1,squadShootingSum[squadSelected] + parseInt(player.skills[0].rating));\r\n              squadSkatingSum.splice(squadSelected,1,squadSkatingSum[squadSelected] + parseInt(player.skills[1].rating));\r\n              squadCheckingSum.splice(squadSelected,1,squadCheckingSum[squadSelected] + parseInt(player.skills[2].rating));\r\n              console.log('squadShootingSum after updating', squadShootingSum);\r\n          }else{\r\n              console.log('squadSelected but not added:', squadSelected);\r\n              console.log('tempSquad[squadSelected] but not added:', tempSquad[squadSelected]);\r\n\r\n          }\r\n      }\r\n    })\r\n\r\n    //Rest of the players will go into new squad.\r\n    tempSquad.push([]);\r\n    for(let i = playerList.legth - 1; i > playerLimit * squads ; i--){\r\n      tempSquad[tempSquad.length - 1].push(playerList[i]);\r\n    }\r\n    // _.each(playerList, (player) => {\r\n    //   tempSquad[tempSquad.length - 1].push(player);\r\n    // });\r\n\r\n    console.log('rest of the players', tempSquad);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}