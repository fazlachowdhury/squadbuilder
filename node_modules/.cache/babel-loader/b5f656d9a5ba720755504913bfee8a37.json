{"ast":null,"code":"import _ from 'lodash';\nexport function generateSquads(allPlayersList, squads) {\n  //Array to hold squads\n  let tempSquad = []; //copied array to reduce calls to server on reset\n\n  let currentPlayerList = _.clone(allPlayersList, true); //If squads is < 0, return all players in waiting list\n\n\n  if (!_.isInteger(squads) || squads < 1) {\n    tempSquad.push([]);\n    tempSquad[0] = _.clone(currentPlayerList, true);\n    return tempSquad;\n  } //Number of players in each squad.\n\n\n  const playerLimit = Math.floor(currentPlayerList.length / squads); //Holds infromation about squad skills\n\n  let squadShootingSum = [],\n      squadSkatingSum = [],\n      squadCheckingSum = [];\n\n  for (let i = 0; i < squads; i++) {\n    tempSquad.push([]);\n  } //Counter used to identify empty squads\n\n\n  let counter = 0; //Loop through each player to find a suitable squad based on player's stringest skill\n  //and squad skills\n\n  for (let playerCounter = currentPlayerList.length - 1; playerCounter >= 0; playerCounter--) {\n    let player = currentPlayerList[playerCounter]; //Find player's strongest skill.\n\n    let playerStrongestSkill = player.skills.reduce(function (prev, curr) {\n      return prev.rating > curr.rating ? prev : curr;\n    }); //Fill the empty squads first.\n\n    if (counter < squads && tempSquad[counter].length == 0) {\n      //Add player to squad\n      tempSquad[counter].push(player); //update squad stats\n\n      squadShootingSum[counter] = parseInt(player.skills[0].rating);\n      squadSkatingSum[counter] = parseInt(player.skills[1].rating);\n      squadCheckingSum[counter] = parseInt(player.skills[2].rating); //remove player from list indicating player has been added to a squad.\n\n      _(currentPlayerList).splice(playerCounter, 1).value();\n\n      counter++;\n    } else {\n      let squadSelected; //Use player's strongest skill to find match to a squad that has least points for that skill\n\n      if (playerStrongestSkill.type.toUpperCase() === 'SHOOTING') {\n        squadSelected = squadShootingSum.indexOf(squadShootingSum.reduce(function (prev, curr) {\n          return prev < curr ? prev : curr;\n        }));\n        console.log('squadShootingSum', squadShootingSum[squadSelected]);\n      } else if (playerStrongestSkill.type.toUpperCase() === 'SKATING') {\n        squadSelected = squadSkatingSum.indexOf(squadSkatingSum.reduce(function (prev, curr) {\n          return prev < curr ? prev : curr;\n        }));\n        console.log('squadShootingSum', squadShootingSum[squadSelected]);\n      } else {\n        squadSelected = squadCheckingSum.indexOf(squadCheckingSum.reduce(function (prev, curr) {\n          return prev < curr ? prev : curr;\n        }));\n      }\n\n      squadSelected = Number(squadSelected);\n\n      if (tempSquad[squadSelected].length < playerLimit) {\n        tempSquad[squadSelected].push(player); //update squad stats\n\n        squadShootingSum.splice(squadSelected, 1, squadShootingSum[squadSelected] + parseInt(player.skills[0].rating));\n        squadSkatingSum.splice(squadSelected, 1, squadSkatingSum[squadSelected] + parseInt(player.skills[1].rating));\n        squadCheckingSum.splice(squadSelected, 1, squadCheckingSum[squadSelected] + parseInt(player.skills[2].rating)); //remove player from list indicating player has been added to a squad.\n\n        _(currentPlayerList).splice(playerCounter, 1).value();\n      }\n    }\n  } //Now for each suad, set a name, and add squad average skills info\n\n\n  let squadCounter = 0;\n\n  _.each(tempSquad, squad => {\n    //If squad still has unfilled spots, fill them from available players\n    if (squad.length < playerLimit) {\n      squad.push(currentPlayerList[0]); //update squad stats\n\n      squadShootingSum.splice(squadCounter, 1, squadShootingSum[squadCounter] + parseInt(currentPlayerList[0].skills[0].rating));\n      squadSkatingSum.splice(squadCounter, 1, squadSkatingSum[squadCounter] + parseInt(currentPlayerList[0].skills[1].rating));\n      squadCheckingSum.splice(squadCounter, 1, squadCheckingSum[squadCounter] + parseInt(currentPlayerList[0].skills[2].rating)); //remove player from list indicating player has been added to a squad.\n\n      _(currentPlayerList).splice(0, 1).value();\n    }\n\n    let squadInfo = {\n      \"_id\": \"\",\n      \"firstName\": \"\",\n      \"lastName\": \"\",\n      \"skills\": [{\n        \"type\": \"Shooting\",\n        \"rating\": \"\"\n      }, {\n        \"type\": \"Skating\",\n        \"rating\": \"\"\n      }, {\n        \"type\": \"Checking\",\n        \"rating\": \"\"\n      }]\n    }; //Now calculate squad skill info.\n\n    squadInfo.firstName = 'Squad';\n    squadInfo.lastName = 'Average:';\n    squadInfo.skills[0].rating = Math.floor(squadShootingSum[squadCounter] / playerLimit);\n    squadInfo.skills[1].rating = Math.floor(squadSkatingSum[squadCounter] / playerLimit);\n    squadInfo.skills[2].rating = Math.floor(squadCheckingSum[squadCounter] / playerLimit);\n    tempSquad[squadCounter].push(squadInfo);\n    squadCounter++;\n  }); //Rest of the players will go into waiting list.\n\n\n  tempSquad.push([]);\n  tempSquad[tempSquad.length - 1] = _.clone(currentPlayerList, true);\n  return tempSquad;\n}","map":{"version":3,"sources":["C:\\SquadBuilder\\squadbuilder\\src\\utils\\index.js"],"names":["_","generateSquads","allPlayersList","squads","tempSquad","currentPlayerList","clone","isInteger","push","playerLimit","Math","floor","length","squadShootingSum","squadSkatingSum","squadCheckingSum","i","counter","playerCounter","player","playerStrongestSkill","skills","reduce","prev","curr","rating","parseInt","splice","value","squadSelected","type","toUpperCase","indexOf","console","log","Number","squadCounter","each","squad","squadInfo","firstName","lastName"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\n\r\nexport function generateSquads(allPlayersList, squads) {\r\n    //Array to hold squads\r\n    let tempSquad = [];\r\n\r\n    //copied array to reduce calls to server on reset\r\n    let currentPlayerList = _.clone(allPlayersList, true);\r\n\r\n    //If squads is < 0, return all players in waiting list\r\n    if(!_.isInteger(squads) || squads < 1){\r\n      tempSquad.push([])\r\n      tempSquad[0] = _.clone(currentPlayerList, true);\r\n      return tempSquad;\r\n    }\r\n\r\n    //Number of players in each squad.\r\n    const playerLimit = Math.floor(currentPlayerList.length/ squads);\r\n\r\n    //Holds infromation about squad skills\r\n    let squadShootingSum = [],\r\n        squadSkatingSum = [],\r\n        squadCheckingSum = [];\r\n\r\n    for (let i = 0; i< squads; i++) {\r\n        tempSquad.push([])\r\n    }\r\n\r\n    //Counter used to identify empty squads\r\n    let counter = 0;\r\n\r\n    //Loop through each player to find a suitable squad based on player's stringest skill\r\n    //and squad skills\r\n    for (let playerCounter = currentPlayerList.length - 1 ; playerCounter >= 0 ; playerCounter--){\r\n\r\n      let player = currentPlayerList[playerCounter];\r\n\r\n      //Find player's strongest skill.\r\n      let playerStrongestSkill = player.skills.reduce(function(prev, curr) {\r\n          return prev.rating > curr.rating ? prev : curr;\r\n      });\r\n\r\n      //Fill the empty squads first.\r\n      if(counter < squads && tempSquad[counter].length == 0){\r\n        //Add player to squad\r\n        tempSquad[counter].push(player);\r\n        //update squad stats\r\n        squadShootingSum[counter] = parseInt(player.skills[0].rating);\r\n        squadSkatingSum[counter] = parseInt(player.skills[1].rating);\r\n        squadCheckingSum[counter] = parseInt(player.skills[2].rating);\r\n        //remove player from list indicating player has been added to a squad.\r\n        _(currentPlayerList).splice(playerCounter, 1).value();\r\n        counter++;\r\n      }else{\r\n         let squadSelected;\r\n          //Use player's strongest skill to find match to a squad that has least points for that skill\r\n          if(playerStrongestSkill.type.toUpperCase() === 'SHOOTING'){\r\n            squadSelected = squadShootingSum.indexOf(squadShootingSum.reduce(function(prev, curr) {\r\n                return prev < curr ? prev : curr;\r\n            }));\r\n            console.log('squadShootingSum', squadShootingSum[squadSelected]);\r\n          }else if(playerStrongestSkill.type.toUpperCase() === 'SKATING'){\r\n            squadSelected = squadSkatingSum.indexOf(squadSkatingSum.reduce(function(prev, curr) {\r\n                return prev < curr ? prev : curr;\r\n            }));\r\n            console.log('squadShootingSum', squadShootingSum[squadSelected]);\r\n          }else{\r\n            squadSelected = squadCheckingSum.indexOf(squadCheckingSum.reduce(function(prev, curr) {\r\n                return prev < curr ? prev : curr;\r\n            }));\r\n          }\r\n\r\n\r\n          squadSelected = Number(squadSelected);\r\n\r\n          if(tempSquad[squadSelected].length < playerLimit){\r\n              tempSquad[squadSelected].push(player);\r\n              //update squad stats\r\n              squadShootingSum.splice(squadSelected,1,squadShootingSum[squadSelected] + parseInt(player.skills[0].rating));\r\n              squadSkatingSum.splice(squadSelected,1,squadSkatingSum[squadSelected] + parseInt(player.skills[1].rating));\r\n              squadCheckingSum.splice(squadSelected,1,squadCheckingSum[squadSelected] + parseInt(player.skills[2].rating));\r\n              //remove player from list indicating player has been added to a squad.\r\n              _(currentPlayerList).splice(playerCounter, 1).value();\r\n          }\r\n      }\r\n\r\n    }\r\n\r\n\r\n    //Now for each suad, set a name, and add squad average skills info\r\n    let squadCounter = 0;\r\n    _.each(tempSquad, (squad) => {\r\n\r\n      //If squad still has unfilled spots, fill them from available players\r\n      if(squad.length < playerLimit){\r\n        squad.push(currentPlayerList[0]);\r\n        //update squad stats\r\n        squadShootingSum.splice(squadCounter,1,squadShootingSum[squadCounter] + parseInt(currentPlayerList[0].skills[0].rating));\r\n        squadSkatingSum.splice(squadCounter,1,squadSkatingSum[squadCounter] + parseInt(currentPlayerList[0].skills[1].rating));\r\n        squadCheckingSum.splice(squadCounter,1,squadCheckingSum[squadCounter] + parseInt(currentPlayerList[0].skills[2].rating));\r\n        //remove player from list indicating player has been added to a squad.\r\n        _(currentPlayerList).splice(0, 1).value();\r\n      }\r\n\r\n      let squadInfo = {\r\n          \"_id\": \"\",\r\n          \"firstName\": \"\",\r\n          \"lastName\": \"\",\r\n          \"skills\": [\r\n            {\r\n              \"type\": \"Shooting\",\r\n              \"rating\": \"\"\r\n            },\r\n            {\r\n              \"type\": \"Skating\",\r\n              \"rating\": \"\"\r\n            },\r\n            {\r\n              \"type\": \"Checking\",\r\n              \"rating\": \"\"\r\n            }\r\n          ]\r\n      };\r\n\r\n      //Now calculate squad skill info.\r\n      squadInfo.firstName = 'Squad';\r\n      squadInfo.lastName = 'Average:';\r\n      squadInfo.skills[0].rating = Math.floor(squadShootingSum[squadCounter]/playerLimit);\r\n      squadInfo.skills[1].rating = Math.floor(squadSkatingSum[squadCounter]/playerLimit);\r\n      squadInfo.skills[2].rating = Math.floor(squadCheckingSum[squadCounter]/playerLimit);\r\n      tempSquad[squadCounter].push(squadInfo);\r\n\r\n      squadCounter++;\r\n    });\r\n\r\n    //Rest of the players will go into waiting list.\r\n    tempSquad.push([]);\r\n    tempSquad[tempSquad.length - 1] = _.clone(currentPlayerList, true);\r\n\r\n    return tempSquad;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}